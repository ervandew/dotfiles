" Author: Eric Van Dewoestine

" pathogen (plugin loading in vim) {{{
  call pathogen#infect()
  call pathogen#infect('~/projects/vim/{}')
  call pathogen#helptags()
" }}}

runtime macros/matchit.vim

" ag.vim {{{
  nmap gf :Ag -g<cr>
  nmap gF :Ag! -g<cr>
  nnoremap <silent> <leader>> :AgPrompt<cr>
" }}}

" buffers.vim {{{
  let g:BuffersDeleteOnTabClose = 1

  " replace :bd with version which won't close the current tab if deleting the
  " last buffer on that tab
  cabbrev <expr> bd getcmdtype() == ':' && getcmdpos() == 3 ? 'BufferDelete' : 'bd'

  nnoremap <silent> <leader>b :BuffersToggle<cr>
" }}}

" csv.vim {{{
  hi CSVColumnHighlight ctermfg=white
  hi CSVDelimiter  ctermfg=239
  hi CSVColumnEven ctermfg=243
  hi CSVColumnOdd  ctermfg=245
  let g:csv_highlight_column = 'y'
  let g:csv_no_conceal = 1
  let g:csv_hiGroup = 'CSVColumnHighlight'
" }}}

" dailylog.vim {{{
  nmap <silent> <leader>lo :DailyLogOpen<cr>
  nmap <silent> <leader>ls :DailyLogStart<cr>
  nmap <silent> <leader>lp :DailyLogStop<cr>
  nmap <silent> <leader>lr :DailyLogRestart<cr>
  let g:dailylog_home = '~/files/dailylog'
  let g:dailylog_path = '<year>/<month>/<day>.txt'
  "let g:dailylog_tracker_url = ''
" }}}

" diff.vim {{{
  cabbrev dn DiffNextChange
  cabbrev dp DiffPrevChange
" }}}

" eclim.vim {{{
  "let g:EclimNailgunClient = 'python'
  let g:EclimMakeDispatchEnabled = 0
  let g:EclimLargeFileEnabled = 1

  " tyring out lsp (pyright)
"  let g:EclimPythonValidate = 0

  let g:EclimOpenUrlInVimPatterns = [
      \ '\.\(dtd\|xml\|xsd\)$',
      \ '\.txt$',
      \ '\.vim$',
    \ ]

  " for sphinx
  let g:EclimAntCompilerAdditionalErrorFormat =
    \ '\%W%.%#\ WARNING:\ %f:%l:\ %m,' .
    \ '\%W%.%#\ WARNING:\ %f::\ %m,'

  " mark current line
  nnoremap <silent> <leader>s :Sign<cr>
" }}}

" indentdetect.vim {{{
  " Perform after the filetype has been set since indent detection relies on
  " the file's syntax to skip comments and strings.
  " Note: wrapped in exists(...) call to avoid error when lazy.nvim runs at
  " startup
  autocmd FileType * if exists(':IndentDetect') | IndentDetect | endif
" }}}

" lookup.vim {{{
  let g:LookupSingleResultAction = 'split'
" }}}

" machem.vim {{{
  let g:MatchemEndOfLineMapping = 1
" }}}

" maximize.vim {{{
  " mapping to maximize window
  map <silent> <space><space> :MaximizeWindow<cr>

  " use tab to simplify window switching
  "nnoremap <silent> <tab><tab> :call maximize#NavigateWindows('winc p')<cr>
  "nnoremap <silent> <tab>k :call maximize#NavigateWindows('winc k')<cr>
  "nnoremap <silent> <tab>l :call maximize#NavigateWindows('winc l')<cr>
  "nnoremap <silent> <tab>h :call maximize#NavigateWindows('winc h')<cr>
  "nnoremap <silent> <tab>j :call maximize#NavigateWindows('winc j')<cr>

  " minimize a window
  "nnoremap <silent> <leader>m
  "  \ :let w = winnr()<cr>
  "  \ :call maximize#NavigateWindows('winc p')<cr>
  "  \ :exec 'MinimizeWindow ' . w<cr>
  "  \ :unlet w<cr>
  "nnoremap <silent> <leader>M :MinimizeRestore<cr>
" }}}

" nerdcommenter.vim {{{
  let g:NERDCreateDefaultMappings = 0
  let g:NERDSpaceDelims = 0
  let g:NERDRemoveExtraSpaces = 0
  let g:NERDDefaultAlign = 'start'
  let g:NERDToggleCheckAllLines = 1
  vmap gc <Plug>NERDCommenterToggle
  nmap gc <Plug>NERDCommenterToggle
  vmap gC <Plug>NERDCommenterAlignLeft
  nmap gC <Plug>NERDCommenterAlignLeft
" }}}

" notebook.vim {{{
  let g:NotebookDir = '~/notebook/'
" }}}

" ranger.vim {{{
nnoremap <silent> <leader>/ :Ranger<cr>
" }}}

" snipmate.vim {{{
  let snippets_dir = expand('~/.vim/snippets')
" }}}

" supertab.vim {{{
  let g:SuperTabDefaultCompletionType = 'context'
  let g:SuperTabContextTextFileTypeExclusions = ['javascript', 'sql']

  " auto select the first result when using 'longest'
  "let g:SuperTabLongestHighlight = 1

  let g:SuperTabLongestEnhanced = 1
  let g:SuperTabClosePreviewOnPopupClose = 1

  " map <c-space> to <c-p> completion (useful when supertab 'context'
  " defaults to something else).
  imap <nul> <c-r>=SuperTabAlternateCompletion("\<lt>c-p>")<cr>

  autocmd FileType python
    \ if &completefunc != '' |
    \   call SuperTabChain(&completefunc, "<c-p>") |
    \ endif
" }}}

" taglisttoo.vim {{{
  nnoremap <silent> <leader>t :call taglisttoo#taglist#Taglist({'pick': 1})<cr>
" }}}

" vcs.vim {{{
  nnoremap <silent> <leader>ga :VcsAnnotate<cr>
  nnoremap <silent> <leader>gl :VcsLog<cr>
" }}}

" vim:ft=vim:fdm=marker
