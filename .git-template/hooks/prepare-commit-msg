#!/bin/bash

##
# pre-commit hook used to:
# - prepopulate a ticket reference when composing a commit message
# - prevent amending a merge commit (can be bypassed using git amend alias) and
#   from amending a commit found in other branches.
##

# Handle amends (third arg is only supplied on commits with one of -c, -C, or --amend)
if [ "$3" == HEAD ] ; then
  if [ ! $(git symbolic-ref HEAD 2> /dev/null) ] ; then
    exit 0 ; # don't interrupt amending during rebase on detached HEAD
  fi

  # prevent accidental amends of merge commits
  parents=$(git cat-file -p HEAD | grep '^parent' | wc -l);
  if [ $parents -gt 1 ] ; then
    echo "abort: HEAD is a merge commit. use one of the following if you really want to amend it:"
    echo "  $ git commit -n --amend ..."
    echo "  $ git amend -n ..."
    exit 1
  fi

  # allow if --no-verify was supplied (git ignores for prepare-commit-msg)
  no_verify=$(ps -ocommand= -p $PPID | grep -e '--no-verify');
  if [ -z "$no_verify" ] ; then
    # prevent amending commit found in other branches, but allow a list of
    # ignored branches
    ignore_branches=($(git config rewrite.safe.ignore))
    ignore_pattern="$(git brname)"
    if [ -n "$ignore_branches" ] ; then
      for br in ${ignore_branches[@]} ; do
        ignore_pattern="$ignore_pattern|$br"
      done
    fi
    branches=$(
      git branch -a --format '%(refname)' --contains $(git log -1 --pretty=tformat:%h) |
      perl -ne "print unless /^(.*\/)?\b(${ignore_pattern})$/"
    )
    if [ -n "$branches" ] ; then
      echo "abort: the following branches contain the commit to be amended:"
      for b in $branches ; do
        b=$(echo "$b" | perl -pe 's|^refs/(heads/)?||')
        echo -e "  $b"
      done
      exit 1
    fi
  fi

# Non-amend, look for ticket number prefix on the branch name, and if found,
# add a 'refs #<ticket-number>' to the commit message.
else
  branch=$(git rev-parse --abbrev-ref HEAD)
  ticket=$(echo $branch | perl -pe 's|(^([A-Z]{3}-)?\d+)[-_].*|\1|')
  if [ "$branch" != "$ticket" ] ; then
    message="refs #${ticket}"
    # use alternate format for jira issues
    if [[ $ticket =~ [A-Z]{3} ]] ; then
      message="${ticket}"
    fi
    line=$(grep '^#' -nm 1 $1 | cut -d':' -f1)
    if [ -n "$line" ] ; then
      sed -i "${line}i ${message}\n" $1
    fi
  fi
fi

exit 0
