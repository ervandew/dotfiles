[user]
  name = ervandew
  email = ervandew@gmail.com

[alias]
  ls = ls-files
  brname = rev-parse --abbrev-ref HEAD
  brexists = "!f() { git show-ref --verify --quiet refs/heads/$1; }; f"
  brdefault = "!f() { if $(git brexists staging) ; then echo staging ; else echo master; fi; }; f"
  root = rev-parse --show-toplevel
  # returns: <repo_name>:<branch_info>
  # branch_info is typically the current branch name, but if a rebase is in
  # progress it will be "rebase" and if a specific commit has been checked out,
  # it will display the result of git describe.
  repo = "!f() { branch=$(git brname 2> /dev/null); if [ -n \"$branch\" ] ; then if [ \"$branch\" == \"HEAD\" ] ; then if git status | grep 'rebase in progress' > /dev/null ; then branch='rebase'; else branch=$(git describe --always); fi; fi; echo $(basename $(git rev-parse --show-toplevel)):$branch; else exit 1; fi; }; f"

  # determines if the current branch has been pushed or not
  pushed = "!f() { [[ \"$(git show-ref refs/heads/$(git brname) | cut '-d ' -f1)\" = \"$(git show-ref refs/remotes/origin/$(git brname) | cut '-d ' -f1)\" ]]; }; f"

  # git aliases using my git-pick script to support numbered index args

  # generate list indexes
  st = !git -c color.ui=always status -sb | git pick -t file '^\\s*[AMDR?]+\\s*(?:.* -> )?(.*)'
  br = !git -c color.ui=always branch "$@" | git pick -t rev '^\\s+(\\S*).*'
  slog = !git -c color.ui=always log --pretty=simple "$@" | git pick -t rev '^(\\w+) .*'

  # act on file list indexes
  u = pick -t file checkout
  d = pick -t file diff
  a = pick -t file -r add
  r = pick -t file -r clean -f
  ci = !git -c status.relativePaths=false pick -t file commit -e
  unstage = pick -t file reset HEAD
  untrack = pick -t file --cached
  forget = pick -t file rm --cached

  ignore = pick -t file update-index --assume-unchanged
  unignore = pick -t file update-index --no-assume-unchanged

  # act on rev list indexes
  co = pick -t rev checkout
  rs = pick -t rev reset
  cp = pick -t rev cherry-pick
  flog = pick -t rev log -1 --name-status
  glog = pick -t rev slog --graph
  dlog = "!f() { R=HEAD; if [[ \"$1\" =~ ^[a-zA-Z0-9]+$ ]] ; then R=$1; shift; fi; git pick -t rev log -1 -p $R \"$@\"; }; f"

  # view the last committed version of a file, even if it has since been removed
  view = "!f() { F=$1; if [[ ! \"$1\" == *:* ]] ; then F=$(git rev-list -n 1 HEAD -- $F)^:$F; fi; git show $F 2>&1 | vim - -c \"doautocmd BufRead $1 | set nomod noma\"; }; f"

  # $ git clone git://<host>/.git <target>
  # Reverse tunnel to allow checkout from a client machine to a server machine.
  # $ ssh -N <client_host> -R 9418:localhost:9418
  serve = daemon --reuseaddr --verbose --base-path=. --export-all ./.git
  serveweb = instaweb

  # The pre commit hook ~/.git-template/hooks/prepare-commit-msg will also
  # check that the commit to be ammeneded is not in another branch.
  amend = "!f() { git pick -t file commit --no-verify --amend --date=\"$(date -R)\" \"$@\"; }; f"

  omerge = !git merge origin/$(git brname)
  orebase = "!f() { B=$(git brname); git rebasesafe origin/$B; if [ $? -ne 0 ] ; then echo \"abort: Preventing conflicting rebase\"; return; fi; git rebase \"$@\" origin/${B}; }; f"

  dbranch = "!f() { B=$1; git branch -d ${B} && if [ -n \"$(git remote)\" ] ; then git push origin :heads/${B}; fi; }; f"

  # perform a fetch only if the current FETCH_HEAD is 60 or more minutes old.
  lfetch = "!f() { if [ -z \"$(git remote)\" ] ; then return; fi; T=$((($(date +%s) - $((ls -l --time-style=+%s .git/FETCH_HEAD 2> /dev/null || echo 0) | cut -d ' ' -f6)) / 60)); if [ $T -ge 60 ] ; then git fetch; fi; }; f"

  # $ git rebasesafe <rebase_with>
  #   checks if any other branches contain the same commits that would be
  #   rebased on the current branch if rebased with <rebase_with>.
  # Invoked by ~/.git-template/hooks/pre-rebase to ensure this check always occurs.
  rebasesafe = "!f() { if [ -z \"$1\" ] ; then echo \"abort: Name of the branch that would be rebased with is required.\"; return; fi; B=$(git brname); A=$(git cherry -v $1); if [ $? -gt 0 ] ; then return ; fi; A=$(echo $A | perl -pe 's|\\+ ([a-f0-9]+) .*|--contains \\1|'); git lfetch; if [ -n \"$A\" ] ; then R=$(git branch -a $A | perl -ne \"print unless /\\b$B\\b/\"); fi; if [ -z \"$R\" ] ; then echo \"No overlapping branches found.\"; else echo -e \"The following branches overlap, rebase not recommended:\n$R\"; return 1; fi; }; f"

  # $ git mergein <target branch>
  #   - rebase the target branch against the current branch (running rebasesafe
  #     first)
  #   - run rebase -i on the target branch allowing you to cleanup messages,
  #     squash commits, re-order, etc.
  #   - merge the target into the current branch
  #   - display a prompt to push the changes to the origin
  #     - when pushing, also force push the rebased target so that merge/pull
  #       requests are closed.
  #   - finally display a prompt to delete the now merged in branch locally
  #     and from the origin.
  mergein = "!f() { I=$(git pick -e -t rev $1); if [ -z \"$I\" ] ; then echo \"abort: Name of the branch to merge into this branch is required.\"; return; fi; B=$(git brname); if ! $(git brexists \"$I\") ; then echo \"abort: Local branch '$I' not found.\"; return; fi; if [ \"$B\" == \"$I\" ] ; then echo \"abort: Attempting to merge $B into itself.\"; return; fi; echo \"Running git fetch...\"; git fetch; if [ \"$(git in)\" != \"\" ] ; then echo \"abort: Incoming commits not yet merged.\"; git in; return; fi; git co $I; git rebasesafe $B; if [ $? -ne 0 ] ; then echo \"abort: Preventing conflicting rebase\"; git co $B; return; fi; git rebase $B; if [ $? -ne 0 ] ; then return; fi; git rebase -i $B; if [ \"$(git brname)\" == \"HEAD\" ] ; then return; fi; read -p \"Continue to merge $(git brname) into $B (y/n)? \"; if [ \"$REPLY\" != \"y\" ] ; then return; fi; git co $B; git merge $I; if [ -n \"$(git remote)\" ] ; then git out; read -p \"Push to origin (y/n)? \"; if [ \"$REPLY\" == \"y\" ] ; then git co $I && git push -f; git co $B && git push; fi; fi; read -p \"Delete branch $I (y/n)? \"; if [ \"$REPLY\" == \"y\" ] ; then git dbranch $I; fi; }; f"

  # log commits that differ between the current branch and the supplied target
  blog = "!f() { ARGS=\"\"; while [[ \"$1\" =~ ^- ]] ; do ARGS=\"$ARGS $1\"; shift; done; B1=$(git brname); if [ $# -gt 1 ]; then B1=$1; shift; fi; B2=$1; echo \"$B1...$B2\"; echo \"  < $B1\"; echo \"  > $B2\"; git log $ARGS --pretty=blog $B1...$B2; }; f"
  # log commits that are found in the target branch that are not in the current branch
  blogin = !git blog --right-only
  # log commits that are found in the current branch that are not in the target branch
  blogout = !git blog --left-only
  # unified diff between branches
  # $ git bdiff staging
  # $ git bdiff staging...topic-branch
  bdiff = !git diff --left-only

  in = !git log --pretty=simple ..origin/$(git brname)
  din = !git log -p ..origin/$(git brname)
  fin = !git in --name-status

  out = !git -c color.ui=always log --pretty=simple origin/$(git brname).. | git pick -t rev '^(\\w+) .*'
  dout = !git log -p origin/$(git brname)..
  fout = !git log --pretty=simple origin/$(git brname).. --name-status

  dstash = stash show -p
  # FIXME: will this work if there was a conflict?
  stash-unapply = !git stash show -p --no-textconv --binary | git apply -R

  # $ git all <command> [<command args>]
  #   runs the supplied git command against all repositories found in ~/projects
  all = "!f() { for i in $(find ~/projects/ -maxdepth 3 -name .git -type d -exec dirname {} \\; | sort) ; do echo -e \"\\n### \\e[0;33m$(basename $i)\\e[0m\"; cd $i ; git -c color.ui=always \"$@\" ; done; }; e(){ f \"$@\" | /usr/bin/less -FRX; }; e"

  # opens up the github url comparing the current branch against the default or the
  # optionally supplied branch.
  ghcompare = "!f() { B=${1-$(git brparent)}; A=${2-$(git brname)}; xdg-open \"https://github.com/$(git remote -v | grep '^origin\\>.*(push)' | perl -pe 's|.*@github.com:(.*)\\.git .*|\\1|')/compare/$B...$A\"; }; f"

  # adds a new github remote based on the supplied username.
  ghremoteadd = "!f() { R=$1; if [ -z \"$R\" ] ; then echo 'abort: remote user name required' ; else git remote add $1 git://$(git remote -v | grep '^origin\\>.*(push)' | perl -pe \"s|.*@(github.com):.*?(/.*\\.git) .*|\\1/$1\\2|\") && git fetch $1; fi; }; f"

  # aliases for working with gitlab
  glcompare = "!f() { B=${1-$(git brparent)}; A=${2-$(git brname)}; xdg-open \"https://$(git remote -v | grep '^origin\\>.*(push)' | perl -pe 's|.*@(.*):(.*)\\.git .*|\\1/\\2|')/compare/$B...$A\"; }; f"
  glpullrequest = "!f() { B=${1-$(git brparent)}; A=${2-$(git brname)}; if ! $(git pushed $A) ; then git push ; fi; xdg-open \"https://$(git remote -v | grep '^origin\\>.*(push)' | perl -pe 's|.*@(.*):(.*)\\.git .*|\\1/\\2|')/merge_requests/new?merge_request[source_branch]=$A&merge_request[target_branch]=$B&merge_request[title]=$A\"; }; f"

[branch]
  autosetupmerge = true
  autosetuprebase = always

[color]
  ui = auto

[color "diff"]
  commit = green

[color "status"]
  changed = blue
  untracked = white

[core]
  editor = vim
  excludesfile = ~/.gitignore
  pager = /usr/bin/less -+$LESS -FRX

[diff]
  renames = true

[fetch]
  prune = true

[init]
  templatedir = ~/.git-template

[merge]
  tool = vimdiff

[mergetool]
  keepBackup = false

[pretty]
  hash = "format:%h"
  simple = "format:%h %Cblue%<(11,trunc)%ar%Creset %<(8,trunc)%an %Cgreen%<(60,trunc)%s%Creset"
  blog = "format:%m %h %Cblue%<(11,trunc)%ar%Creset %<(8,trunc)%an %Cgreen%<(60,trunc)%s%Creset"

[push]
  default = current

[rebase]
  autostash = true
  stat = true

[rerere]
  enabled = true

[tig "color"]
  cursor = default color236 bold
