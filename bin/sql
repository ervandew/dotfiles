#!/bin/bash

##
# Script to prompt the user with a menu of available rdbms instances to connect
# to and then open the appropriate shell for the rdbms.
#
# Sources the file ~/.sqlcfg which can contain a comma separated list of
# instance names to their corresponding command line arguments:
#
#   CONNECTION_STRINGS="
#     mysql:localhost: mydb,
#     mysql:staging: -h mystaginghost -P 3307 -u myuser mydb,
#     postgres:localhost: mydb,
#     postgres:staging: postgresql://user@host/mydb
#   "
#
# The format of the CONNECTION_STRINGS is:
#   dbtype:instance_name: <command line arguments>,
#     dbtype: one of 'mysql' or 'postgres'
#     instance_name: any name you choose, but keep it alpha numeric
#     command line arguments: any necessary arguments that need to be supplied
#       to the database's corresponding command line client to connect to that
#       database.

# Make sure to separate each entry with a comma.
#
# The connction string format also supports a password placeholder allowing you
# to pull the password from your keyring using
# http://github.com/ervandew/keyring. In this example the
# <password:myuser@mystaginghost> will be replaced with the password from your
# keyring under the key myuser@mystaginghost:
#
#     mysql:staging: -h mystaginghost -u myuser -p<password:myuser@mystaginghost> mydb,
#
# Since psql doesn't allow the password in the connection string, if you use a
# url formatted connection string like the following, the user@host portion
# will be pulled out and an attempt will be made to use that to lookup the
# password from the keyring:
#
#   postgresql://user@host/mydb
#
# To help distiguish environments, a COLORS variable is supported allowing you
# to define the prompt color for each instance:
#
#   COLORS="
#     postgres:staging:38;5;176m,
#     postgres:production:0;31m,
#   "
#
# These use the bash escape sequences as the color value, allowing you to use
# any color that bash supports. By default green will be used if no entry has
# been defined.
#
# The ~/.sqlcfg file can also define a PRODUCTION variable which is a space
# separated list of connection entry names corresponding to production
# databases or any instance that you'd like to flag when connecting to it:
#
#   PRODUCTION="
#     postgres:staging
#     postgres:production
#   "
#
# When starting a client for a database instance in this list, the prompt will
# be red, unless you have an entry in COLORS, to remind you to be careful what
# you execute in this db. Running sql files against these entries will also be
# prevented.
#
# Author: Eric Van Dewoestine
##

function usage() {
  echo "Usage: sql [args]"
  echo "   Start a sql console:"
  echo "     sql"
  echo "   Run a single query:"
  echo "     - mysql:"
  echo "       sql -e \"select 1\""
  echo "     - postgresql:"
  echo "       sql -c \"select 1\""
  echo "   Execute a sql script:"
  echo "     sql somescript.sql"
}

function runmysql() {
  # attempt to run a script
  runscript mysql "$@"

  # Note: as of the time of this writing, the color escape sequences screw up
  # line wrapping in the client, so this adds a newline to work around that.
  PROMPT_TEXT=$(echo -e "\\x1B[$COLOR$LABEL\\x1B[0m\n>")
  runclient mysql --prompt "$PROMPT_TEXT " "$@"
}

function runsqlplus() {
  # attempt to run a script
  runscript "sqlplus -S" "$@"

  # execute sqlplus normally with any user supplied args
  if [ -e "$(which rlwrap 2> /dev/null)" ] ; then
    runclient rlwrap sqlplus -L "$@"
  else
    runclient sqlplus -L "$@"
  fi
}

function runpsql() {
  username=$(echo "$@" | perl -pe 's|.*postgresql://(.*?@.*?)[:/].*|\1|')
  if [ -n "$username" ] ; then
    PGPASSWORD=$(_keyring $username)
  fi

  # attempt to run a script
  PGPASSWORD=$PGPASSWORD runscript psql "$@"

  PROMPT1="$LABEL(%/)%R%# "
  PROMPT2="$LABEL(%/)%R%# "
  PROMPT1="%[%033[$COLOR%]$PROMPT1%[%033[0m%]"
  PROMPT2="%[%033[0;33m%]$PROMPT2%[%033[0m%]"

  PGPASSWORD=$PGPASSWORD runclient psql \
    --variable PROMPT1="$PROMPT1" \
    --variable PROMPT2="$PROMPT2" \
    "$@"
}

function runclient() {
  while [ 1 -eq 1 ] ; do
    # set tmux title
    if [ -n "$TMUX" ] ; then
      tmux rename-window -t$TMUX_PANE "$INSTANCE"
    fi

    "$@"

    # reset tmux title
    if [ -n "$TMUX" ] ; then
      name=$(basename $SHELL 2> /dev/null)
      tmux rename-window -t$TMUX_PANE "$name"
    fi

    if [ $? -eq 0 ] ; then
      break
    fi

    read -p "error returned, retry? (y/n): " input
    if [ "$input" != "y" ] ; then
      break
    fi
  done
}

function runscript() {
  client=$1
  shift

  if [ $# -gt 0 ] ; then
    # run a sql file
    if [ -f "$1" ] ; then
      SQL_FILE="$1"
    elif [ -f "$PWD/$1" ] ; then
      SQL_FILE="$PWD/$1"
    fi

    if [ -n "$SQL_FILE" ] ; then
      if [ -n "$IS_PRODUCTION" ] ; then
        echo "Preventing running of script against db marked in PRODUCTION."
        exit 1;
      fi

      echo "Running sql file: $1"
      shift
      CAT=cat
      # handle gzipped files
      if [ "${SQL_FILE##*.}" == "gz" ] ; then
        CAT=zcat
      elif [ "${SQL_FILE##*.}" == "xz" ] ; then
        CAT=xzcat
      fi
      time $CAT $SQL_FILE | $client "$@"
      exit
    fi
  fi
}

function runchoice() {
  instance=$1
  shift

  if ! $(echo "$CONNECTION_STRINGS" | grep "$instance" &> /dev/null) ; then
    echo "abort: unrecognized instance: $instance"
    return
  fi

  connection=$(echo $CONNECTION_STRINGS | perl -pe "s|.*\b($instance:[^,]*)\s*,?.*|\1|")
  dbtype=$(echo $connection | perl -pe 's|^(\w+):.*|\1|')
  connection=$(echo $connection | perl -pe 's|.*:\s(.*)|\1|')

  if [ -n "$(echo $PRODUCTION | grep "\<$instance\>")" ] ; then
    IS_PRODUCTION=1
    COLOR="0;31m"
  else
    COLOR="0;32m"
  fi

  if [ -n "$(echo $COLORS | grep "\<$instance\>")" ] ; then
    COLOR=$(echo $COLORS | perl -pe "s|.*\b$instance\b:((\d+;)?\d;\d+m),?.*|\1|")
  fi

  if [[ "$connection" =~ \<password:.*\> ]] ; then
    key=$(echo "$connection" | perl -pe 's|.*<password:(.*?)>.*|\1|')
    pass=$(_keyring $key)
    if [ -z "$pass" ] ; then
      echo "abort: unable to find password for key: $key"
      exit 1;
    fi
    connection=$(echo "$connection" | perl -pe "s|<password:(.*?)>|$pass|")
  fi

  INSTANCE=$instance
  LABEL=$(echo $instance | perl -pe 's|^\w+:(.*).*|\1|')
  if [ "$dbtype" == "mysql" ] ; then
    runmysql "$@" $connection
  elif [ "$dbtype" == "oracle" ] ; then
    runsqlplus "$@" $connection
  elif [ "$dbtype" == "postgres" ] ; then
    runpsql "$@" $connection
  else
    echo "abort: missing or unrecognized dbms prefix in connection info"
  fi
}

function _keyring() {
  key=$1
  pass=$(keyring get $key 2> /dev/null)

  # try again, ignoring venv path
  if [ -n "$VIRTUAL_ENV" -a -z "$path" ] ; then
    pass=$(
      PATH=$(echo $PATH | perl -pe "s|$VIRTUAL_ENV/bin:||")
      keyring get $key 2> /dev/null
    )
  fi

  echo "$pass"
}

if [ "$1" == "-?" -o "$1" == "-h" -o "$1" == "--help" ] ; then
  usage
  exit 0
fi

if [ ! -f ~/.sqlcfg ] ; then
  echo "abort: ~/.sqlcfg not found. This file should contain your connection settings."
  exit 1
fi
source ~/.sqlcfg

# see if a db choice was supplied
if $(echo "$1" | grep ":" &> /dev/null) ; then
  instance=$1; shift
  runchoice $instance "$@"
  exit
fi

if [ -z "$CONNECTION_STRINGS" ] ; then
  echo "abort: missing CONNECTION_STRING setting from ~/.sqlcfg"
  exit 1
fi

OPTIONS=""
OLD_IFS=$IFS
IFS=$',\n'
COUNT=0
for option in $CONNECTION_STRINGS ; do
  option=$(echo $option | perl -pe 's|^\s*(.*):\s.*|\1|')
  OPTIONS="$OPTIONS $option"
  COUNT=$((COUNT + 1))
done

if [ "$COUNT" -eq 0 ] ; then
  echo "abort: no entries found in your CONNECTION_STRING setting from ~/.sqlcfg"
  exit 1
elif [ "$COUNT" -eq 1 ] ; then
  runchoice $option "$@"
  exit
fi

IFS=$OLD_IFS
PS3="select sql instance: "
select instance in $OPTIONS ; do
  runchoice $instance "$@"
  break
done

# vim:nowrap
