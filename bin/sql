#!/bin/bash

##
# Script to prompt the user with a menu of available rdbms instances to connect
# to and then connect to their chosen instance.
#
# Sources the file ~/.sqlcfg which can contain a comma separated list of
# instance names to their corresponding command line arguments:
#
#   CONNECTION_STRINGS="
#     mysql:localhost: mydb,
#     mysql:staging: -h mystaginghost -P 3307 -u myuser mydb,
#     postgres:localhost: mydb,
#     postgres:staging: --host mystaginghost --username myuser mydb,
#     mysql:other: none,
#     oracle:other: none,
#     postgres:other: none,
#   "
#
# The format of the CONNECTION_STRINGS is:
#   dbtype:instance_name: <command line arguments>,
#     dbtype: one of 'mysql', 'oracle', or 'postgres'
#     instance_name: any name you choose, but keep it alpha numeric
#     command line arguments: any necessary arguments that need to be supplied
#       to the database's corresponding command line client to connect to that
#       database.
# Make sure each entry has a trailing comma to separate it from the next entry.
#
# The connction string format also supports a password placeholder allowing you
# to pull the password from your keyring using
# http://github.com/ervandew/keyring. In this example the
# <password:myuser@mystaginghost> will be replaced with the password from your
# keyring under the key myuser@mystaginghost:
#
#     mysql:staging: -h mystaginghost -u myuser -p<password:myuser@mystaginghost> mydb,
#
# Note: the instance name 'other' is reserved and when chosen from the list,
# will result in a series of prompts for the necessary data to connect to an
# arbitrary database of that type.
#
# The ~/.sqlcfg file can also define a PRODUCTION variable which is a space
# separated list of instance names corresponding to production databases or any
# instance that you'd like to flag when connecting to it:
#
#   PRODUCTION="staging production"
#
# When starting a client for a database instance in this list, the prompt will
# be red to remind you to be careful what you execute in this db.
# Note: currently this feature does not support sqlplus.
#
# Author: Eric Van Dewoestine
##

# default connection strings
MYSQL_DEFAULT="-h <host> -P <port> -u <user> -p<password> <database>"
ORACLE_DEFAULT="<user>/<host>@'(description=(address=(protocol=TCP)(host=<host>)(port=<port>))(connect_data=(sid=<database>)))'"
POSTGRES_DEFAULT="-h <host> -p <port> -U postgres <database>"

function usage() {
  echo "Usage: sql [args]"
  echo "   Start a sql console:"
  echo "     sql"
  echo "   Run a single query in mysql:"
  echo "     sql -e \"select 1\""
  echo "   Execute a sql script:"
  echo "     sql somescript.sql"
  echo "   Run a query in mysql without prompting for the db to use:"
  echo "     sql mysql:mydbhost -e \"select 1\""
}

function runmysql() {
  # check if host:port pair was supplied
  runinstance runmysql "$@"

  # attempt to run a script
  runscript mysql "$@"

  PROMPT_TEXT="$instance>"
  # execute mysql normally with any user supplied args
  if [ -n "$IS_PRODUCTION" ] ; then
    PROMPT_TEXT=$(echo -e "\\x1B[1;31m$instance>\\x1B[0m")
  fi
  runclient mysql mysql --prompt "$PROMPT_TEXT " "$@"
}

function runsqlplus() {
  # check if host:port pair was supplied
  runinstance runsqlplus "$@"

  # attempt to run a script
  runscript "sqlplus -S" "$@"

  # execute sqlplus normally with any user supplied args
  if [ -e "$(which rlwrap 2> /dev/null)" ] ; then
    runclient oracle rlwrap sqlplus -L "$@"
  else
    runclient oracle sqlplus -L "$@"
  fi
}

function runpsql() {
  # check if host:port pair was supplied
  runinstance runpsql "$@"

  # attempt to run a script
  runscript psql "$@"

  PROMPT1="$instance(%/)%R%# "
  PROMPT2="$instance(%/)%R%# "
  if [ -n "$IS_PRODUCTION" ] ; then
    PROMPT1="%[%033[0;31m%]$PROMPT1%[%033[0m%]"
    PROMPT2="%[%033[0;33m%]$PROMPT2%[%033[0m%]"
  fi

  # execute psql normally with any user supplied args
  runclient postgres psql \
    --variable PROMPT1="$PROMPT1" \
    --variable PROMPT2="$PROMPT2" \
    "$@"
}

function runinstance() {
  client=$1
  shift

  HOST_PORT_DB=`echo "$1" | grep ":"`
  if [ -n "$HOST_PORT_DB" ] ; then
    shift
    DB_HOST=`echo $HOST_PORT_DB | sed 's/[^:]\+:\([^:]\+\):.*/\1/'`
    DB_PORT=`echo $HOST_PORT_DB | sed 's/[^:]\+:[^:]\+:\([^:]\+\):.*/\1/'`
    DB_NAME=`echo $HOST_PORT_DB | sed 's/.*:\(.*\)/\1/'`

    if [ "$client" == "runmysql" ] ; then
      CONNECTION=$MYSQL_DEFAULT
    elif [ "$client" == "runsqlplus" ] ; then
      CONNECTION=$ORACLE_DEFAULT
    elif [ "$client" == "runpsql" ] ; then
      CONNECTION=$POSTGRES_DEFAULT
    fi

    CONNECTION=`echo $CONNECTION | sed "s/<host>/$DB_HOST/"`
    CONNECTION=`echo $CONNECTION | sed "s/<port>/$DB_PORT/"`
    CONNECTION=`echo $CONNECTION | sed "s/<database>/$DB_NAME/"`
    instance="$DB_HOST:$DB_PORT"
    if [ -n "$(echo $PRODUCTION | grep "\<$DB_HOST\>")" ] ; then
      IS_PRODUCTION=1
    fi

    $client "$@" $CONNECTION
    exit
  fi
}

function runclient() {
  name=$1
  shift

  while [ 1 -eq 1 ] ; do
    # for screen title
    SCREEN=`echo $TERM | grep "screen"`
    if [ -n "$SCREEN" ] ; then
      echo -ne "\\ek$name\\e\\\\"
    fi

    "$@"

    # reset screen title
    if [ -n "$SCREEN" ] ; then
      echo -ne "\\ek$(basename $SHELL 2> /dev/null)\\e\\\\"
    fi

    if [ $? -eq 0 ] ; then
      break
    fi

    read -p "error returned, retry? (y/n): " input
    if [ "$input" != "y" ] ; then
      break
    fi
  done
}

function runscript() {
  client=$1
  shift

  if [ $# -gt 0 ] ; then
    # run a sql file
    if [ -f "$1" ] ; then
      SQL_FILE="$1"
    elif [ -f "$PWD/$1" ] ; then
      SQL_FILE="$PWD/$1"
    fi

    if [ -n "$SQL_FILE" ] ; then
      if [ -n "$IS_PRODUCTION" ] ; then
        echo "Preventing running of script against db marked in PRODUCTION."
        exit 1;
      fi

      echo "Running sql file: $1"
      shift
      CAT=cat
      # handle gzipped files
      if [ "${SQL_FILE##*.}" == "gz" ] ; then
        CAT=zcat
      elif [ "${SQL_FILE##*.}" == "xz" ] ; then
        CAT=xzcat
      fi
      time $CAT $SQL_FILE | $client "$@"
      exit
    fi
  fi
}

function runchoice() {
  instance=$1
  shift

  if ! `echo "$CONNECTION_STRINGS" | grep "$instance" &> /dev/null` ; then
    echo "abort: unrecognized instance: $instance"
    return
  fi

  CONNECTION=`echo $CONNECTION_STRINGS | sed "s/.*\b\($instance:[^,]*\)\s*\(,.*\|$\)/\1/"`
  TYPE=`echo $CONNECTION | sed "s/^\(\w\+\):.*/\1/"`
  instance=`echo $CONNECTION | sed "s/^\w\+:\(.*\):\s.*/\1/"`
  CONNECTION=`echo $CONNECTION | sed "s/.*:\s\(.*\)/\1/"`

  if [ -n "$(echo $PRODUCTION | grep "\<$instance\>")" ] ; then
    IS_PRODUCTION=1
  fi

  if [[ "$CONNECTION" =~ \<password:.*\> ]] ; then
    key=$(echo "$CONNECTION" | sed 's|.*<password:\(.*\?\)>.*|\1|')
    pass=$(keyring get $key 2> /dev/null)

    # try again, ignoring virtualenv path
    if [ -n "$VIRTUAL_ENV" -a -z "$path" ] ; then
      pass=$(PATH=$(echo $VIRTUAL_PATH | sed "s|$VIRTUAL_ENV/bin:||") keyring get $key 2> /dev/null)
    fi

    if [ -z "$pass" ] ; then
      echo "abort: unable to find password for key: $key"
      exit 1;
    fi
    CONNECTION=$(echo "$CONNECTION" | sed "s|<password:\(.*\?\)>|$pass|")
  fi

  if [ "$TYPE" == "mysql" ] ; then
    runmysql "$@" $CONNECTION
  elif [ "$TYPE" == "oracle" ] ; then
    runsqlplus "$@" $CONNECTION
  elif [ "$TYPE" == "postgres" ] ; then
    runpsql "$@" $CONNECTION
  else
    echo "abort: missing or unrecognized dbms prefix in connection info"
  fi
}

if [ "$1" == "-?" -o "$1" == "-h" -o "$1" == "--help" ] ; then
  usage
  exit 0
fi

if [ ! -f ~/.sqlcfg ] ; then
  echo "abort: ~/.sqlcfg not found. This file should contain your connection settings."
  exit 1
fi
source ~/.sqlcfg

# see if a db choice was supplied
if `echo "$1" | grep ":" &> /dev/null` ; then
  instance=$1; shift
  runchoice $instance "$@"
  exit
fi

if [ -z "$CONNECTION_STRINGS" ] ; then
  echo "abort: missing CONNECTION_STRING setting from ~/.sqlcfg"
  exit 1
fi

OPTIONS=""
OLD_IFS=$IFS
IFS=$',\n'
COUNT=0
for option in $CONNECTION_STRINGS ; do
  option=`echo $option | sed "s/^\s*\(.*\):\s.*/\1/"`
  OPTIONS="$OPTIONS $option"
  COUNT=$((COUNT + 1))
done

if [ "$COUNT" -eq 0 ] ; then
  echo "abort: no entries found in your CONNECTION_STRING setting from ~/.sqlcfg"
  exit 1
elif [ "$COUNT" -eq 1 ] ; then
  runchoice $option "$@"
  exit
fi

IFS=$OLD_IFS
PS3="select sql instance: "
select instance in $OPTIONS ; do
  if [ "$instance" == "mysql:other" ] ; then
    read -p "hostname (localhost): " dbhost
    read -p "port (3306): " dbport
    read -p "database: " database
    runmysql "mysql:${dbhost:=localhost}:${dbport:=3306}:${database}" "$@"
  elif [ "$instance" == "oracle:other" ] ; then
    read -p "hostname (localhost): " dbhost
    read -p "port (1521): " dbport
    read -p "sid: " sid
    runsqlplus "oracle:${dbhost:=localhost}:${dbport:=1521}:${sid}" "$@"
  elif [ "$instance" == "postgres:other" ] ; then
    read -p "hostname (localhost): " dbhost
    read -p "port (5432): " dbport
    read -p "database: " database
    runpsql "postgres:${dbhost:=localhost}:${dbport:=5432}:${database}" "$@"
  else
    runchoice $instance "$@"
  fi
  break
done

# vim:nowrap
