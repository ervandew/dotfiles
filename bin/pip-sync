#!/usr/bin/env python

##
# Script which scans requirements.txt and checks if any of the packages have a
# newer version available or if the installed version doesn't match what is
# found in requirements.txt.
##
import logging
import os
import re
import requests
import subprocess
import sys

#from pip._vendor.rich.progress import track
from pip._internal.metadata import get_default_environment

def main():
  pip_logger = logging.getLogger('pip._internal')
  pip_logger.setLevel(logging.ERROR)

  args = list(sys.argv[1:])
  filepath = args[0] if args else None
  if not filepath:
    filepath = os.path.join(os.getcwd(), 'requirements.txt')

  if not os.path.exists(filepath):
    print('file not found:', filepath, file=sys.stderr)
    sys.exit(1)

  packages = []
  #dependents = {}
  with open(filepath) as f:
    pkg_pad = len('package')
    for line in f.readlines():
      line = line.strip()
      if not line or line.startswith('#'):
        continue

      package, __, version = line.partition('==')
      if not version:
        continue

      packages.append((package, version))
      pkg_pad = max(pkg_pad, len(package))

  #upgrade = 0
  install = []
  version_pad = 12
  #frmt = '%%%(pkg_pad)ss: %%%(version_pad)ss %%%(version_pad)ss %%%(version_pad)ss' % {
  #  'pkg_pad': pkg_pad,
  #  'version_pad': version_pad,
  #}
  #header = frmt % ('package', 'latest', 'current', 'installed')
  frmt = '%%%(pkg_pad)ss: %%%(version_pad)ss %%%(version_pad)ss' % {
    'pkg_pad': pkg_pad,
    'version_pad': version_pad,
  }
  header = frmt % ('package', 'current', 'installed')
  print_header = True

  env = get_default_environment()
  installed_versions = {
    dist.canonical_name.lower(): str(dist.version)
    for dist in env.iter_all_distributions()
  }
  #for package, version in track(packages, description='Processing...'):
  for package, version in packages:
    #latest = _request_latest(package)

    package_name = package.lower()
    # remove any package subscripting
    package_name = re.sub(r'^(.*?)(\[.*\])?$', r'\1', package_name)

    installed = installed_versions.get(package_name, '')

    #if (latest != version or installed != version):
    if (installed != version):
      if installed != version:
        install.append('%s==%s' % (package, version))
        padding = ' ' * (version_pad - len(installed))
        installed = '%s\033[1;31m%s\033[0m' % (padding, installed)

      #if latest != version:
      #  padding = ' ' * (version_pad - len(version))
      #  version = '%s\033[0;33m%s\033[0m' % (padding, version)
      #  upgrade += 1

      if print_header:
        print(header)
        print_header = False

      #print(frmt % (package, latest, version, installed))
      print(frmt % (package, version, installed))

  print('pypi packages:            %2s' % len(packages))
  #print('requirements out of date: %2s' % upgrade)
  print('install out of date:      %2s' % len(install))

  if install:
    valid = ('y', 'n')
    response = input('Install out of data packages? (y/n): ')
    while response not in valid:
      response = input('  please enter y or n: ')

    if response == 'y':
      subprocess.check_call(['pip', 'install'] + install)

def _request_latest(package):
  response = requests.get('https://pypi.org/pypi/%s/json' % package)
  if response.status_code != 200:
    return '???'

  json = response.json()
  return json['info']['version']

if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    print()
