[alias]
  ls = ls-files
  desc = describe
  brname = rev-parse --abbrev-ref HEAD
  brexists = "!f() { git show-ref --verify --quiet refs/heads/$1; }; f"
  upstream = "!f() { git branch -vv | grep ${1:-$(git rev-parse --abbrev-ref HEAD)} | perl -pe 's/.*?\\[(.*?)(:\\s|\\]).*/\\1/ || exit 0' ; } ; f"
  root = rev-parse --show-toplevel
  # returns: <repo_name>:<branch_info>
  # branch_info is typically the current branch name, but if a rebase is in
  # progress it will be "rebase" and if a specific commit has been checked out,
  # it will display the result of git describe.
  repo = "!f() { branch=$(git brname 2> /dev/null); if [ -n \"$branch\" ] ; then if [ \"$branch\" == \"HEAD\" ] ; then if git status | grep 'rebase in progress' > /dev/null ; then branch='rebase'; else branch=$(git describe --always); fi; fi; echo $(basename $(git rev-parse --show-toplevel)):$branch; else exit 1; fi; }; f"

  # determines if the supplied or current branch is protected
  protected = "!f() { B=${1:-$(git rev-parse --abbrev-ref HEAD)} ; if git config get push.force.protected | grep \"\\b${B}\\b\" &> /dev/null ; then echo \"this operation is not supported on a protected branch: $B\" ; exit 1 ; fi ; } ; f"

  # determines if the current branch has been pushed or not
  pushed = "!f() { [[ \"$(git show-ref refs/heads/$(git brname) | cut '-d ' -f1)\" = \"$(git show-ref refs/remotes/origin/$(git brname) | cut '-d ' -f1)\" ]]; }; f"

  # git aliases using my git-pick script to support numbered index args

  # generate list indexes
  st = !git -c color.ui=always status -sb | git pick -t file '^\\s*[AMDRU?]+\\s*(?:.* -> )?(.*)'
  br = !git -c color.ui=always branch "$@" | git pick -t rev '^\\s+(\\S*).*'
  slog = !git -c color.ui=always log --pretty=simple "$@" | git pick -t rev '^(?:.*\\dm)?(\\w+) .*'

  # act on file list indexes
  r = pick -t file restore
  d = pick -t file diff
  a = pick -t file -r add
  del = pick -t file -r clean -f
  unstage = pick -t file reset HEAD
  # remove from git, but keep the file
  untrack = pick -t file rm --cached

  ci = !git -c status.relativePaths=false pick -t file commit -e
  # The pre commit hook ~/.git-template/hooks/prepare-commit-msg will also
  # check that the commit to be ammeneded is not in another branch.
  amend = "!f() { git pick -t file commit --amend --date=\"$(date -R)\" \"$@\"; }; f"

  # add alias to open files in editor, w/ alias to do so using pick indexes
  edit = "!f() { $EDITOR -o \"$@\"; }; f"
  e = pick -t file edit

  ignore = pick -t file update-index --assume-unchanged
  unignore = pick -t file update-index --no-assume-unchanged

  # act on rev list indexes
  s = pick -t rev switch
  cp = pick -t rev cherry-pick
  flog = pick -t rev log -1 --name-status
  glog = pick -t rev slog --graph
  dlog = "!f() { R=HEAD; if [[ \"$1\" =~ ^[a-zA-Z0-9]+$ ]] ; then R=$1; shift; fi; git pick -t rev log -1 -p $R \"$@\"; }; f"

  # view the last committed version of a file, even if it has since been removed
  view = "!f() { F=$1; if [[ ! \"$1\" == *:* ]] ; then F=$(git rev-list -n 1 HEAD -- $F)^:$F; fi; git show $F 2>&1 | $EDITOR - -c \"let g:lsp_disabled = v:true | doautocmd BufRead $1 | set nomod noma bt=nofile | nmap <buffer> q :quit<cr>\"; }; f"

  omerge = merge @{upstream}
  orebase = "!f() { git rebase \"$@\" @{upstream}; }; f"

  dbranch = "!f() { set -e ; git protected $1 ; UPSTREAM=$(git upstream $1) ; git branch -d $1 ; if [ -n \"$UPSTREAM\" ] ; then echo \"deleting upstream: $UPSTREAM\" ; git push origin -d $(echo $UPSTREAM | perl -pe 's|^origin/||') ; fi ; }; f"

  # $ git mergein <target branch>
  #   - rebase the target branch against the current branch
  #   - run rebase -i on the target branch allowing you to cleanup messages,
  #     squash commits, re-order, etc.
  #   - merge the target into the current branch
  #   - display a prompt to push the changes to the origin
  #     - when pushing, also force push the rebased target so that merge/pull
  #       requests are closed.
  #   - finally  delete the now merged in branch locally and from the origin.
  mergein = "!f() { set -e; I=$(git pick -e -t rev $1); if [ -z \"$I\" ] ; then echo \"abort: Name of the branch to merge into this branch is required.\"; return; fi; B=$(git brname); if ! $(git brexists \"$I\") ; then echo \"abort: Local branch '$I' not found.\"; return; fi; if [ \"$B\" == \"$I\" ] ; then echo \"abort: Attempting to merge $B into itself.\"; return; fi; echo \"Running git fetch...\"; git fetch; if [ \"$(git in)\" != \"\" ] ; then echo \"abort: Incoming commits not yet merged.\"; git in; return; fi; git switch $I; git rebase $B; if [ $? -ne 0 ] ; then return; fi; git rebase -i $B; if [ \"$(git brname)\" == \"HEAD\" ] ; then return; fi; read -p \"Continue to merge $(git brname) into $B (y/n)? \"; if [ \"$REPLY\" != \"y\" ] ; then return; fi; git switch $B; git merge $I; if [ -n \"$(git remote)\" ] ; then git out; read -p \"Push to origin (y/n)? \"; if [ \"$REPLY\" == \"y\" ] ; then git switch $I && git push -f; git switch $B && git push; fi; fi; git dbranch $I; }; f"

  # log commits that differ between the current branch and the supplied target
  blog = "!f() { ARGS=\"\"; while [[ \"$1\" =~ ^- ]] ; do ARGS=\"$ARGS $1\"; shift; done; B1=$(git brname); if [ $# -gt 1 ]; then B1=$1; shift; fi; B2=$1; echo \"$B1...$B2\"; echo \"  < $B1\"; echo \"  > $B2\"; git log $ARGS --pretty=blog $B1...$B2; }; f"
  # log commits that are found in the target branch that are not in the current branch
  blogin = blog --right-only
  # log commits that are found in the current branch that are not in the target branch
  blogout = blog --left-only
  # unified diff between branches
  # $ git bdiff staging
  # $ git bdiff staging...topic-branch
  bdiff = diff --left-only

  in = log --pretty=simple ..@{upstream}
  din = log -p ..@{upstream}
  fin = in --name-status

  out = log --pretty=simple @{upstream}..
  dout = log -p @{upstream}..
  fout = log --pretty=simple @{upstream}.. --name-status

  dstash = stash show -p
  # FIXME: will this work if there was a conflict?
  stash-unapply = !git stash show -p --no-textconv --binary | git apply -R

  # after starting a git bisect, this alias allows git to perform the rest of
  # the operations based on the success/failure of a specified unit test.
  # NOTE: requires that a config entry of 'runtest.<repo-name>' exists.
  # Eg.
  # [runtest]
  #   my-repo = runtest-cmd --some-arg
  bisect-test = "!git bisect run $(git config runtest.$(basename $(git root)))"

  # opens up the github url comparing the current branch against the default or the
  # optionally supplied branch.
  ghcompare = "!f() { B=${1}; A=${2-$(git brname)}; $(git config web.open) \"https://github.com/$(git remote -v | grep '^origin\\>.*(push)' | perl -pe 's|.*@github.com:(.*)\\.git .*|\\1|')/compare/$B...$A\"; }; f"

  # adds a new github remote based on the supplied username.
  ghremoteadd = "!f() { R=$1; if [ -z \"$R\" ] ; then echo 'abort: remote user name required' ; else git remote add $1 https://$(git remote -v | grep '^origin\\>.*(push)' | perl -pe \"s|.*@(github.com):.*?(/.*\\.git) .*|\\1/$1\\2|\") && git fetch $1; fi; }; f"

  # aliases for working with gitlab
  glcompare = "!f() { B=${1}; A=${2-$(git brname)}; $(git config web.open) \"https://$(git remote -v | grep '^origin\\>.*(push)' | perl -pe 's|.*@(.*):(.*)\\.git .*|\\1/\\2|')/compare/$B...$A\"; }; f"
  glpullrequest = "!f() { set -e; if [ $# -lt 1 ]; then echo \"abort: target branch name required\"; return 1; fi; B=${1}; A=${2-$(git brname)}; echo \"creating gitlab pull request $A -> $B...\"; if ! $(git pushed $A) ; then git push ; fi; $(git config web.open) \"https://$(git remote -v | grep '^origin\\>.*(push)' | perl -pe 's|.*@(.*):(.*)\\.git .*|\\1/\\2|')/merge_requests/new?merge_request[source_branch]=$A&merge_request[target_branch]=$B&merge_request[title]=$A\"; }; f"

[branch]
  autosetupmerge = true
  autosetuprebase = always

[color]
  ui = auto

[color "diff"]
  commit = green

[color "status"]
  changed = blue
  untracked = white

[core]
  editor = nvim
  pager = /usr/bin/less -+$LESS -FRX
  hookspath = ~/.config/git/hooks

[diff]
  renames = true

[fetch]
  prune = true

[init]
  defaultBranch = main

[merge]
  tool = nvim

[mergetool]
  keepBackup = false

[mergetool "nvim"]
  cmd = nvim -d -O3 "$REMOTE" "$BASE" "$LOCAL" "$MERGED" -c "Mergetool"

[pretty]
  hash = "format:%h"
  simple = "format:%C(#624646)%h %Cblue%<(11,trunc)%ar%C(#666666) %<(8,trunc)%an %Creset%<(60,trunc)%s"
  blog = "format:%m %C(#624646)%h %Cblue%<(11,trunc)%ar%C(#666666) %<(8,trunc)%an %Creset%<(60,trunc)%s"

[push]
  default = current
  autosetupremote = true

[push "force"]
  # space separated list of branches to prevent force pushing to
  # (enforced by custom pre-push hook)
  # NOTE: also used by dbranch alias
  protected = main master qa-test staging sprint

[rebase]
  autostash = true
  stat = true

[rerere]
  enabled = true

[web]
  open = xdg-open

[include]
  path = config.user
  path = config.work
