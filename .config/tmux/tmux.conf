set -g default-terminal "tmux-256color"

# note, this must match $TERM value of the base terminal emulator to get true
# color support
set -g terminal-overrides "alacritty:Tc"

set -g history-limit 5000
set -g set-titles on
set -g set-titles-string "@#H: #W"
set -g allow-rename off
set -g visual-bell off
set -g status-keys vi
set -g status-left "\
#{?pane_in_mode,#[fg=#afd7af#,bg=#5f875f],}\
#{?client_prefix,#[fg=#a75fa7#,bg=#2a002a],}\
[#S]#[bg=colour236] "
set -g status-right "#[fg=green]#(~/.config/tmux/tmux-status-right)"
set -g status-interval 10000
set -g status-style "fg=colour241,bg=colour236"
set -g message-style "fg=colour253,bg=colour236"
set -g pane-border-style "fg=colour236"
set -g pane-active-border-style "fg=blue"
set -ga update-environment "DBUS_SESSION_BUS_ADDRESS"

setw -g mode-keys vi
setw -g mode-style "fg=colour253,bg=colour238"
setw -g window-status-style "fg=colour245"
setw -g window-status-current-style "fg=colour253"
setw -g window-status-bell-style "fg=colour238,bg=colour160"

# configure C-a as the prefix key (emulate screen)
set -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

# mode = ~Alt for ctrl-v binding in alacritty to allow nvim to use native
# ctrl-v also disables ctrl-v when tmux is running, so a specific binding is
# required here, but we don't want this binding to interfere with ctrl-v in
# nvim running in tmux either, so jump through hoops to allow passthrough
is_vim="
  ps -o state= -o comm= -t '#{pane_tty}' | \
  grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'
"
bind-key -n C-v if-shell "$is_vim" {
  send-keys C-v } {
  run-shell "xclip -o -selection clipboard | tmux load-buffer -; tmux paste-buffer -p"
}

bind-key  0 select-window -t 0 \; refresh-client -S
bind-key ^0 select-window -t 0 \; refresh-client -S
bind-key  1 select-window -t 1 \; refresh-client -S
bind-key ^1 select-window -t 1 \; refresh-client -S
bind-key  2 select-window -t 2 \; refresh-client -S
bind-key ^2 select-window -t 2 \; refresh-client -S
bind-key  3 select-window -t 3 \; refresh-client -S
bind-key ^3 select-window -t 3 \; refresh-client -S
bind-key  4 select-window -t 4 \; refresh-client -S
bind-key ^4 select-window -t 4 \; refresh-client -S
bind-key  5 select-window -t 5 \; refresh-client -S
bind-key ^5 select-window -t 5 \; refresh-client -S
bind-key  6 select-window -t 6 \; refresh-client -S
bind-key ^6 select-window -t 6 \; refresh-client -S
bind-key  7 select-window -t 7 \; refresh-client -S
bind-key ^7 select-window -t 7 \; refresh-client -S
bind-key  8 select-window -t 8 \; refresh-client -S
bind-key ^8 select-window -t 8 \; refresh-client -S
bind-key  9 select-window -t 9 \; refresh-client -S
bind-key ^9 select-window -t 9 \; refresh-client -S
bind-key ^j select-pane -D \; refresh-client -S
bind-key  j select-pane -D \; refresh-client -S
bind-key ^k select-pane -U \; refresh-client -S
bind-key  k select-pane -U \; refresh-client -S
bind-key ^h select-pane -L \; refresh-client -S
bind-key  h select-pane -L \; refresh-client -S
bind-key ^l select-pane -R \; refresh-client -S
bind-key  l select-pane -R \; refresh-client -S
bind-key ^p previous-window \; refresh-client -S
bind-key  p previous-window \; refresh-client -S
bind-key ^n next-window \; refresh-client -S
bind-key  n next-window \; refresh-client -S
bind-key  w last-window \; refresh-client -S
bind-key ^w last-window \; refresh-client -S
bind-key  H swap-window -t -1
bind-key  L swap-window -t +1
bind-key  J swap-pane -D
bind-key  K swap-pane -U
bind-key  R move-window -r
bind-key  s copy-mode \; send-keys '0'
bind-key  - split-window -v
bind-key  | split-window -h

# vi mode key bindings
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
